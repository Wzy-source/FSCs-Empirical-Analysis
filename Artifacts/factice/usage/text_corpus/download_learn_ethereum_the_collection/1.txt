Learn Ethereum: The Collection Copyright © 2018 SitePoint Pty. Ltd.
Ebook ISBN: 978-1-925836-08-0
Cover Design: Alex Walker
Project Editor: Bruno Škvorc
Notice of Rights
All rights reserved. No part of this book may be reproduced, stored in a retrieval system or transmitted in any form or by any means, without the prior written permission of the publisher, except in the case of brief quotations embodied in critical articles or reviews.
Notice of Liability
The author and publisher have made every effort to ensure the accuracy of the information herein. However, the information contained in this book is sold without warranty, either express or implied. Neither the authors and SitePoint Pty. Ltd., nor its dealers or distributors will be held liable for any damages to be caused either directly or indirectly by the instructions contained in this book, or by the software or hardware products described herein.
Trademark Notice
Rather than indicating every occurrence of a trademarked name as such, this book uses the names only in an editorial fashion and to the benefit of the trademark owner with no intention of infringement of the trademark.

Published by SitePoint Pty. Ltd.
48 Cambridge Street Collingwood
VIC Australia 3066
Web: www.sitepoint.com
Email: books@sitepoint.com
About SitePoint
SitePoint specializes in publishing fun, practical, and easy-to-understand content for web professionals. Visit http://www.sitepoint.com/ to access our blogs, books, newsletters, articles, and community forums. You’ll find a stack of information on JavaScript, PHP, design, and more.
Preface
Blockchain technology has certainly been hyped over the past few years, but when you strip all of that away, what can actually do with it? This book provides you with an introduction to Ethereum, an open source platform that's based based on blockchain. It enables developers to build and deploy decentralized applications that can be relied on to work without fraud, censorship or interference from third parties. Far more than just a cryptocurrency or smart contracts platform, Ethereum is becoming an entire ecosystem for building decentralized applications.
This collection contains three books:
A Developer's Guide to Ethereum, a collection of articles that provides an introduction to blockchain technology more broadly before focusing on the Ethereum platform specifically
Ethereum: Tools & Skills, a collection of articles examining some of the most popular Ethereum tools, and walk you through how to use them when building your own Ethereum-based apps.
Build Your First Ethereum DApp, a complete project tutorial that will walk you through the creation of a complete distributed application (DApp) based on the Ethereum platform.
Who Should Read This Book?
This collection is for anyone interested in using the Ethereum platform for development. No prior knowledge of blockchain is assumed.
Conventions Used
Code Samples
Code in this book is displayed using a fixed-width font, like so: <h1>A Perfect Summer's Day</h1> <p>It was a lovely day for a walk in the park. The birds were singing and the kids were all back at school.</p>
Where existing code is required for context, rather than repeat all of it, ⋮ will be displayed: function animate() { ⋮ new_variable = "Hello"; }
Some lines of code should be entered on one line, but we’ve had to wrap them because of page constraints. An ➥ indicates a line break that exists for formatting purposes only, and should be ignored:
URL.open("http://www.sitepoint.com/responsive-web- ➥design-real user-testing/?responsive1");
You’ll notice that we’ve used certain layout styles throughout this book to signify different types of information. Look out for the following items.
Tips, Notes, and Warnings
Hey, You!
Tips provide helpful little pointers.
Ahem, Excuse Me ...
Notes are useful asides that are related—but not critical—to the topic at hand. Think of them as extra tidbits of information.
Make Sure You Always ...
... pay attention to these important points.
Watch Out!
Warnings highlight any gotchas that are likely to trip you up along the way.
Book 1: A Developer's Guide to Ethereum



Chapter 1: Blockchain: What It Is, How It Works, Why It’s So Popular
by Bruno Škvorc
This introduction to blockchain was originally published at Bruno's Bitfalls website, and is reproduced here with permission.
What is “the blockchain”? How does it work, why is it popular, and why do so many people claim it’ll revolutionize the world?
In this article, we’ll explain blockchain technology with a banal example that’s nonetheless valid for most cryptocurrencies currently in circulation. Not familiar with the concept of cryptocurrency? See here!
Mario and Luigi
Mario needs to send $100 to his brother, Luigi, because Luigi being Luigi, he got into some debts at the other end of the world.

Mario walks into the bank and says “I’d like to send $100 to Luigi”. The teller says “Account card please”, “ID please”, and “done”, in that order.

In this centralized scenario, the bank is the central authority over Mario’s and Luigi’s money. Both Mario and Luigi trust the bank to transfer the amount, and believe the numbers shown on their bank account statements. They trust the bank — despite the fact that all the bank has to do is change a number in a database. It’s all digital, after all.
However, when we’re dependent on such a central authority, that authority poses a certain threat. It can disappear with our money, it can be evil and not increase Luigi’s value while decreasing Mario’s value, thereby keeping the difference, or it can just be clumsy and make a mistake. Our finances depend directly on their competence.

One way of preventing such scenarios is skipping the bank entirely and having our own system of tracking value and the travel of value from one location to the next.
Imagine a piece of paper on which we’re noting down the status of our bank account. If only Mario and Luigi are using that system, it’s hard to keep it fair. If one of them becomes greedy, the system is already compromised. Hence, such a distributed (non-centralized) system needs to have enough participants to make it viable — a minimum of three.
Papers
Let’s assume we have five participants: Yoshi, Mario, Luigi, Wario, and Bowser, and that each of them has their own piece of paper.

Mario wants to send $100 to Luigi. To do this, he lets everyone know (by loudly proclaiming): “I’m sending $100 to Luigi! Please take note, everyone!”

At that moment, every participant checks Mario’s account to make sure he’s got enough value on it to send to Luigi (yes, every account’s status is public) and if
so, writes this transaction down on their piece of paper. Transactions of this type are written down onto the participants’ pieces of paper until they run out of room. In other words, every transaction between any two people is logged on every participant’s paper.
Before we file the filled-up paper away into a folder or filing cabinet and grab a new, blank one, we need to seal the filled one with a special code.
Seals and Mining
This “seal” guarantees that the contents of the paper are true.
How do we get this seal? With a special algorithm (mathematical operation) which, when we feed it some input data, always produces the same output if the input data is the same.
Let’s take the following as an example:
X1 + X2 + … Xn = Z
In other words, a simple sum.
Let’s assume that our paper’s values are true and valid (i.e. all the transactions are confirmed) if and only if a given summation operation produces the number 10000.
1000 + 6000 + 3000 = 10000
In this case, the input data is 1000, 6000, and 3000, while the seal is 10000.
Okay, so let’s assume that our participants above came to the following agreement: if, when you sum up all the numbers on the paper and a specific combination of other numbers, you get 10000, then the transactions on that paper are valid and can be considered confirmed.
For example, if the paper contains the following five transactions:
Mario -> Luigi = 100
Bowser -> Yoshi = 200
Yoshi -> Luigi = 100
Mario -> Yoshi = 500
Luigi -> Wario = 100
The sum is 1000, so we’re looking for a number that gives 10000 when added to 1000. This remaining 9000 can be achieved with many combinations:
5000 + 4000
1000 + 1000 + 1000 + 1000 + 1000 + 1000 + 1000 + 1000 + 1000 2000 + 3000 + 2000 + 2000
etc…
A computer can’t intuitively tell which numbers will produce the desired number. To get to this result, a computer has to randomly guess between different combinations of numbers under 10000 until it gets one combination that produces 10000. Thus, the first among our participants to correctly guess a combination of numbers that produces 10000 when summed with all the transaction values on the paper will be the one to tell everyone else the result.
Suppose that Yoshi found the combination 4000 + 5000. He tells everyone: “I’ve got a 10000! Try 4000 and 5000!” Given that it’s very easy to verify the correctness of Yoshi’s numbers by simply inputting them into the algorithm, the other participants verify this. All the other participants’ papers that, during this check, now also produce 10000 when summed with 4000 and 5000 effectively validate the list of transactions in front of them. By doing this, a consensus is reached that the papers are all valid.
If someone’s paper doesn’t produce 10000 when summed with 4000 and 5000, we have a problem. If, for example, Bowser either purposely or accidentally logged a different transaction — say, that Mario gave Luigi $200, and not $100 — then the sum will not match the requirements.

Bowser’s paper is thereby considered invalid, and if he wants to continue participating in this system, he’ll have to discard his paper, copy someone else’s valid paper, and promise to be more careful in the future. On the other hand, Yoshi, who was the one who found the winning combination, gets a reward of, for example, $5 from the system. The system produces the $5 out of thin air as a reward for the lucky participant.

This production of money out of thin air is called mining in the cryptocurrency world.
While this was a dramatically simplified example, the only real difference from the real blockchain (beside the fact that in reality it’s all digital and automatic) is the fact that the algorithm being used to produce the seal is different — a more complex one that can accept both numbers and letters, and outputs code like 90bdaa79bbccacf8558edcbb30df48d7fc920eeb75a28f883de4100f58a99b49.

The seals are called hashes, and the algorithms producing them — like SHA256 which produced the above code — are called hashing functions. Try opening this link and inputting any amount of text into the field. Whether you put in a single word or the entire Bible, it’ll always produce a hash of exactly 64 characters.
Hence, to get the hash that seals our paper, we enter into the algorithm all the transactions present on the paper. They become a hash. Since there’s an infinite number of combinations of characters we can provide as input for the algorithm, guessing the original input set of data based purely on the output data is a mathematical impossibility.
Specifically, in the Bitcoin blockchain, the consensus of the network and all its participants is that as long as a produced hash (which we get from combining the last paper’s hash and all the transactions of the current paper, plus a random bit of numbers and letters) starts with a given number of zeroes, it’s valid. For example, if paper 1 has the hash of
0000000000000000058edcbb30df48d7fc920eeb75a28f883de4100f58a99b49, paper 2’s valid hash will be the one which (when the current paper’s transactions and some random data are added to the last paper’s hash) contains an equal number or more zeroes at the front.
To get this combination of random characters needed for producing a new valid hash, a computer must make guesses. Modern computers are very fast and easily try out thousands of combinations per second, but this still isn’t fast enough given that the number of possible combinations is near infinite. As an aside, the aforementioned hash shows us that the difficulty of guessing a new one is ranked 17, because there are 17 zeroes at the front of it. In time, the difficulty will increase and a new valid hash will need more and more zeroes at the front.
When the paper of each participant is marked as valid with the hash, it’s put away into a folder — a ledger of sorts — and a new blank one is pulled out.
In Blockchain Parlance
In blockchain parlance:
One paper is a block.
One block contains many transactions.
One block always follows a previous block, forming a chain — a blockchain. Validated blocks are put away into a ledger (synonymous with blockchain).
Computers guessing the combinations are called nodes. A node that guesses the hash combination gets a reward in the form of the blockchain’s tokens — in our particular example, a few Bitcoins.
The guessing for combinations is called mining, because we’re digging for new value in a big pile of random guesses. Instead of muscles for effort and pickaxes for tools, we use electricity, time, and a computer’s calculating power. The characters in our story above are all in little go-carts precisely because it’s all a race: whoever first confirms a block with a valid hash wins, and gets the very valuable reward. Likewise in the blockchain world, the most powerful computers (or pools of computers) usually win the block rewards.
The existence of a new valid hash is considered proof of work. This is a model that most cryptocurrencies today use in order to make easy guessing or cheating financially non-viable because of too high electricity costs. Some protocols like Ethereum are moving to proof of stake in which the pointless wasting of electricity is being minimized and the punishment for invalid participation is made stricter, but that’s a topic for another post.
Conclusion
All cryptocurrencies are based on blockchain technology. Blockchain is what makes it possible for them to be transparent, definitive (impossible to falsify or duplicate) and somewhat limited in maximum amount produced. Unlike fiat currency (USD, Euro, etc.), cryptocurrencies cannot simply be printed by their creators, except in the case of some scam currencies like Ripple (XRP) or OneCoin. (More on those in another post.)
Blockchain technology allows for distributed control over the financial system of a society — local or global — and helps with avoiding middlemen. This is one of the main reasons why cryptocurrencies have exploded in popularity so much. Due to the distributed nature of the blockchain and millions of users all around the world, all of whom serve as “accountants” and validators, many consider cryptocurrencies to be indestructible and unstoppable. Sadly, that’s a different kind of delusion — one that we’ll cover later (see links in the following section).
What Next?
Here’s some further reading:
What are cryptocurrencies: learn what it’s all about and where the value is coming from.
Bitcoin is not unstoppable: find out how easy it is to actually stop and destroy a cryptocurrency.
Bitcoin is not finite: learn why the theoretical limit of 21 million Bitcoin ever produced simply isn’t true, practically speaking.
Bitcoin is not anonymous: learn why people often (incorrectly) say that Bitcoin is anonymous and useful for the black market and criminal funding.
What is Ethereum: learn about the most powerful blockchain today.
Chapter 2: What is a Bitcoin Node? Mining versus Validation
by Bruno Škvorc
This introduction to Bitcoin Nodes was originally published at Bruno’s Bitfalls website, and is reproduced here with permission.
You’ll often hear the word node thrown around in blockchain and cryptocurrency circles. If you’ve read our intro to blockchain (and we highly recommend you do that), one of the characters in the comic there that’s writing down transactions on a piece of paper is actually a node. That introduction is quite simplified, however — so let’s explain the concept of nodes in a bit more detail now.
Validation Nodes
One node is a computer running specific software. In the case of Bitcoin, one node is a Bitcoin program which connects to other Bitcoin nodes, i.e. other Bitcoin programs on the same machine, or on other machines which can be across the street or on the other side of the planet. There are several types and several versions of Bitcoin software. By picking a specific version of a specific Bitcoin program, a user “votes” for certain changes in the Bitcoin protocol. For example, if a bunch of users suggest the increase of 21 million total BTC to 42 million, the majority of the network is required to vote “yes” by installing the software implementing this change. Code changes are, thus, democratic.
Where this idea falls apart is in the fact that there are very few Bitcoin nodes out there — a mere 10000 currently.

In contrast, Ethereum — a cryptocurrency five years younger — already has twice as many:

Neither number is very impressive from a global perspective. According to some calculations, running a Bitcoin node on AWS (Amazon’s cloud service) costs around $10 per month. This means that taking over 10000 brand new nodes takes $100,000 per month, or only $1.2m per year — which is pocket change to any Bitcoin early adopter.
A list of node software you can install, along with their pros, cons, and special features, can be found here.
It’s important to note that validation nodes are purely an expense for the users running them. They give their users nothing. Bitcoin Core, for example, needs
around 150GB of disk space, 2GB of RAM, and a fast and uncapped internet connection with at least 50KB of constant upload speed available just to run. It’s not uncommon to need to upload over 200GB of traffic per month when running a single node. Validation nodes are volunteer nodes and are useful for the system’s decentralization, but as they become ever more expensive to run, so too does the number of nodes drop. Add to that the mounting disillusion with Bitcoin’s theoretical decentralization due to the fact that bankers seem to have taken over the protocol’s development, and the fact that Bitcoin’s price is being pumped by crime syndicates, and it’s no surprise that the number of nodes dropped by 20% in a single month — from 12000 to 10000. As more nodes disappear, so does centralization. A hostile takeover becomes more and more probable.
Mining Nodes
A mining node is a validation node which also uses the hardware of your own or a rented machine to guess the combinations of numbers and letters needed to validate and verify a block. A mining node can team up with other nodes and send guesses to a common pool (pool mining) to increase chances of guessing, but then counts as only one node.
Because most new miners opt to join a powerful pool to maximize their chances of mining a block and getting rewards, we’re seeing a very serious technological centralization happening in which 20 of the most powerful pools are mining almost all the Bitcoin.
Here’s a list of the biggest mining pools. Notice that the first one mines 25% of all the Bitcoin in existence.
A mining node is the only bit of software which can “produce” new Bitcoin, and running one in a way that makes it worth your while requires either a very strong computer or free electricity. If you’d like to give mining a go, the list of BTC mining software can be found here.
Conclusion
A mining node is a node which contributes to the network by guessing the combinations needed to “seal” the blocks of transactions and thus confirm them, producing new Bitcoins in the process. A validation node is a node which validates this information, makes sure it’s true, and passes the information along to other nodes, thus enabling the transfer of monetary value from location A to location B. Mining nodes are a subset of validation nodes, because every mining node is also a validation node.
This difference is only manifested in the PoW consensus system and becomes technically unnecessary in PoS. With PoS, every node can be a validation node, and mining nodes as such no longer exist: new tokens are created based on another principle. For more about this, please read our PoW vs PoS article.
Chapter 3: How the Lightning Network Helps Blockchains Scale
by Bruno Škvorc
This introduction to the Lightning Network was originally published at Bruno’s Bitfalls website, and is reproduced here with permission.
Bitcoin is currently impractical to use because of slow and expensive transactions plaguing its blockchain. Most people use it as a store of value (the digital gold fallacy) or to trade on exchanges. A concept known as the Lightning Network was introduced as a solution to this scalability issue.
The Basics of the Lightning Network
The Lightning Network was first described in a 2015 whitepaper by Joseph Poon and Thaddeus Dryja. The concept, however, was actually introduced by Satoshi Nakamoto in an email to Mike Hearn in 2013.
The Lightning Network works through payment channels which are actually multi-sig wallets (multiple signature). A multi-sig wallet is just a Bitcoin address which requires a signature or private keys of several owners before money in that address can be spent. You can view them as bank vaults which require the turning of two different keys at the same time in order to open.

A multi-sig wallet can, for example, be the common Bitcoin address of a married couple, wherein they both have to sign a transaction in order to spend their common Bitcoin.
The purpose of payment channels is regular execution of smaller payments and avoidance of high transaction fees. Examples of relationships ideal for LN channels are employee-employer, consumer-producer, utility provider-utility
consumer, coffee drinker-coffee shop, etc. The idea is letting a customer open a payment channel with his coffee shop, regularly paying for coffee without having to wait for confirmation (10 to 60 minutes currently).
How the Lightning Network Works
Let’s explain with a step-by-step example. Our imaginary scenario is as follows:
Bob wants to pay Alice to write articles for him. The deal is 10 BTC for a total of 100 posts, or 0.1 BTC per post.
In a traditional Bitcoin system, that would require one hour on average with a fee of $5 to $500 per transaction, depending on how backlogged the network is. Because both Alice and Bob are bitcoin maximalists, they chose to open an LN channel rather than go with a cheaper and easier to use altcoin.
Step 1: Opening a Channel

Bob creates a regular Bitcoin transaction on the main chain which defines the following:
who he’s opening the channel with
how much BTC he’s sending into the channel (10 BTC)
after how long a period of time (one week in this case) he has the right to take the 10 BTC back if Alice does not respond.
The latter is actually a sub-transaction in the main transaction with a “timelock” function, which makes sure that, in spite of both parties having confirmed it, the money is not moveable for a week.
So, Bob sends Alice two transactions — one in which he suggests opening a payment channel with a 10 BTC deposit on a multi-sig which is opened with that transaction, and one in which he says the 10 BTC go back to him if there’s been no activity in the channel for a week.
Step 2: Accepting the Opening of a Channel

Alice receives two transactions in which she can see that Bob is offering 10 BTC on the multi-sig address with the two of them as the participating parties. She can also see he’s added the condition to return the money to him after one week of inactivity. She accepts this and signs the transactions, after which she broadcasts the transactions and they’re sent to the main blockchain, finalizing the channel’s creation.

It’s important to define two concepts here: signing a transaction and confirming or broadcasting a transaction. A signed transaction is merely ready for sending to the blockchain and constitutes an agreement between parties. It’s not visible on the blockchain. A broadcast or confirmed transaction is sent to the blockchain and closes the payment channel, settling balances.
Signing the first transaction opens the channel and causes Bob’s 10 BTC to be deposited into the multi-sig address. Signing the other, despite allowing Bob to take all 10 BTC back, can only become active after a week.
Alice and Bob now have a week to do the first bit of business.
3. Sending the First Transaction
Alice wrote an article and Bob likes it. He pays 0.1 BTC by doing the following:
He generates a new transaction which states “I’m sending 0.1 BTC from the multi-sig address containing 10 BTC, and I’m sending 9.9 to myself”. Alongside it, he generates another transaction: “If the previous transaction is not broadcast within one week of signing it, then I send myself all 10 BTC from the multi-sig address”.
He sends the transactions over to Alice for signing via Lightning Network nodes without sending them to the main blockchain. Remember: transactions are only finalized in the blockchain once both parties sign and broadcast them.
Alice receives the transactions and checks conditions: 0.1 BTC for an article, OK, and a week to accept and get 0.1 BTC which means I have a week to send a new article in.



Alice doesn’t have to sign these new transactions. By not responding to them, she will trigger the week-long timeout which will return the money to Bob and cancel their arrangement. To keep the deal open, she needs to keep it “on the table” by just signing it and not broadcasting.
This “leaving on the table” is the part the Lightning Network nodes are taking care of. The software accepts and signs the transactions, but only on the LN layer, not the main Bitcoin blockchain. After a signature from Alice, the new state of the channel is the valid state.



The transaction is, at any given point in time, immutable and the conditions described in it must be satisfied before any change can occur: either a week needs to expire, or the transaction needs to be broadcast by either Alice or Bob to finalize the latest distribution: 0.1 - 9.9 BTC.
4. Sending the Second Transaction
Alice sends a new article three days later and it’s up to Bob to send a new 0.1 BTC. Seeing as it’s not possible to alter an existing transaction and Bob is unable to send another 0.1 into the same transaction as before, he generates a new one which says: “From the multi-sig address with 10 BTC I’m sending 0.2 BTC to Alice and 9.8 to me” and another “If Alice doesn’t sign and broadcast this state within a week, I get all 10 BTC”.



Alice now has the opportunity to either sign and broadcast the new transaction, thereby taking 0.2 BTC and finishing the work relationship, or continue with it, send more articles, and get more of such incremental transactions. She can also stay offline or idle for a week and lose it all.



5. Docking Pay
In the second article, Alice accused a competing company of plagiarism but didn’t do enough fact checking. This harmed the company’s reputation and Bob decides to dock 0.05 off her pay.
Bob generates a new transaction which says “From the multi-sig address with 10 BTC I’m sending 0.15 BTC to Alice and 9.85 BTC to myself” alongside a transaction saying “If Alice does not sign and broadcast this within a week, I get all 10 BTC”.



Alice now has the following options:
tolerate the pay cut and sign the transaction, continuing with the work broadcast the last signed transaction, the one for 0.2 BTC and get more money than Bob is currently offering, but this would finish their relationship
not respond and lose it all.
5a. Alice Cheats
Let’s assume that because of the second article’s incident the relationship has been permanently damaged and Alice wants out but she already signed the 0.15 BTC transaction. Can she decide to sign the 0.2 BTC one instead that still on the table?



The LN is set up in such a way that signed (but not sent) transactions are ranked by age. Trying to send an older signed transaction is a punishable offense in the network which sends all the money from the multi-sig to the non-offending party.
This security system makes sure only the latest signed transaction can be broadcast, but has other implications as well: it requires the users to be constantly online to have their nodes be able to communicate with one another. To prevent users from having to be online at all times, the concept of Watchtowers was introduced, which we’ll explain in another post.
5b. Bob Cheats
Let’s assume Bob is the cheater. Alice sent the third article, but Bob decides to punish her further by not paying at all. Alice has no idea whether or not she’ll ever be paid again, and wants to end the relationship. She can simply broadcast the last signed transaction and the 0.15 BTC will be sent to her. She’ll only lose as much money as she spent on writing a single (third) article.



But what if this further offends Bob and he decides to send in another transaction in which he says “from the multi-sig address I’m sending 0 to Alice and 10 to me, and if she doesn’t sign and broadcast within a week it’s all mine anyway”.
This is where the aforementioned concept of signed and broadcast transactions comes into play. For an LN transaction to be valid, it needs to be signed by both parties. If it’s not signed, the last signed transaction is valid for broadcasting.



This makes Alice safe from ultimate fraud.
5c. All Good
The alternative that’s best for everyone involved is for Alice to do her job perfectly and Bob to send incremental transactions. Let’s say that Alice had another mistake or two and ended up earning 9.9 BTC, so that’s what Bob’s latest transaction says: 9.9 BTC to Alice, 0.1 BTC to him. Both are happy with this agreement and Alice signs and broadcasts this transaction.



The following occurs:
Alice signs and broadcasts the transaction and it’s written to the blockchain. The transaction costs a transaction fee, docked from the total being paid out. Seeing as it’s only a single tx now, and not 100 of them, it’s only the cost of a single tx.
Within ten minutes to an hour, the transaction will be finalized on the Bitcoin blockchain and the money will be transferred, the channel closed.

It’s important to note that, while this process sounds incredibly complex, they’re working on masking this complexity and hiding it from users. The payment channels are expected to be invisible in end-user software.
Network and Routing
In the example above, Alice and Bob have a clearly defined relationship with an end goal in mind. In theory, payment channels will stay open indefinitely because of routing. The idea is to connect several nodes and then route payments from one to the other, allowing payments to be sent to nodes you’re not connected with through nodes that are. The software should be able to find a way to get there.
For example, if Alice is working with Roko, a graphic designer, and Bob is working with him too, let’s assume Alice will need a 0.1 BTC graphic design work done. She can send this to Roko through Bob as long as Bob has at least 0.1 BTC in the channel open towards Roko, and Alice has 0.1 BTC in her balance towards Bob. Bob is running a mediator Lightning Network node in this case.

The problem is that if someone already paid Roko through Bob and Bob no longer has a 0.1 BTC balance towards Roko, no one else can pay Roko through Bob; they need to find another route. This video explains it well.
This is an argument for keeping channels open indefinitely and permanently
locking funds into the LN, because it’s assumed LN’s popularity will be so big anyone will be able to pay anyone anywhere. But all this has its own set of problems which we’ll cover in another post.
Conclusion
In essence, the LN is a practical solution to some problems that currently don’t exist in the Bitcoin network. Does this make it an efficient way of scaling Bitcoin? We think not, because some problems seem impossible to solve. We do, however, feel like the concept is interesting and are looking forward to seeing where the developers can take it.
Chapter 4: The Top Nine Uses for Blockchain
by Mateja Kendel
Blockchain is often being shoehorned into projects it shouldn't be a part of, so it's hard to find out how viable it is long-term, and whether or not it can actually end up being used for something.
With that in mind, we've compiled this list of top nine uses for blockchain that are not only viable, but also necessary and highly probable.
1. Financial Freedom
The first and most obvious use is decentralization of money. Bitcoin's original purpose was a cheap and easy but trustless way to transfer monetary value to anyone in the world at any time of day. As that vision slowly faded away, others took up the mantle and now there are many cryptocurrencies that do just that. In underdeveloped countries that skipped landlines and moved straight to smartphones with data connections, e-banking is now possible as long as those people are willing to be their own banks.
But how viable is this? If large corporations like Facebook, Google and Twitter can be commanded to ban cryptocurrency-related advertisements, the unbanked will need jailbroken and rooted phones to install some of the software essential
for an entry into cryptocurrency. This might present a hurdle we've yet to conquer. The various app stores are, after all, still highly centralized.
Still, blockchain's ability to not only let people set up their own trust funds (smart contracts with Ethereum) or organize their own savings and retirement funds is something the world won't be able to ignore for long — for better or worse.
2. Decentralized Data
The blockchain running on several thousands of machines all over the world makes it possible to do wonderful things with data. If you suddenly get the ability to run code, store data, or process mathematical operations on every machine in the world, you can easily find scenarios where this might become useful.
Projects like Golem and iExec make it possible to distribute compute-heavy tasks like rendering graphics or executing CPU instruction respectively, by splitting tasks into thousands of smaller pieces and returning a verified solution to each, forming the master solution at the point of origin. Imagine not having to rent a supercomputer and being able to map the human genome in seconds using distributed computing and paying the executors in pre-purchased tokens!
The potential for data storage is another big deal in blockchain. While we do have Bittorrent and similar solutions, there’s no incentive for keeping files seeded and thus recoverable for a long time. Projects like IPFS, Siacoin, Filecoin, Storj, Maidsafe, Datacoin and others are developing ways to store files across multiple machines in an encrypted and private but incentivized and safe manner. Siacoin, for example, pays users to rent out their extra hard drive space. The users are paid in Sia tokens and right now, though file access is slower than S3 and similar private solutions, it's cheaper and shows a lot of long-term potential. Even for databases, there's BigchainDB and similar options.
Finally, games. With all the data and files being distributable and with the security of the Ethereum blockchain backing the network, many games with collectibles have cropped up. There are still challenges to be resolved, but with scaling solutions like Loom's dappchains, high-throughput games are finally becoming a possibility.
3. Decentralized Internet and Chat
By utilizing the decentralized data aspect mentioned above, we can store websites on various computers around the world and retrieve them in a decentralized way.

Where up until now we needed a central server (or cluster thereof) to host websites or transmit messages online, Ethereum's Swarm and Whisper protocol is making blockchain-based chatting and distributed file retrieval possible.
Status and Toshi, the first platforms to fully dive into these concepts, have grown into platforms for launching decentralized applications. They are, in effect, their own app stores with blockchain APIs exposed, but which can also communicate
with the smartphone they're installed on. This makes decentralized fetching of websites and sending of messages possible.
A Facebook or YouTube which can no longer censor content based on region, or a chat platform which can no longer be shut down when a revolt happens: all this is now a reality. It's a UX nightmare and we're working on this, but it's here and it works.
For an example of a decentralized web application running fully on a blockchain, see DelegateCall.
4. Immutable Records
Another use case that's rather straightforward is immutable records. This can be done in two ways: verification style and full-store style.
Verification is when a user keeps the original of a file somewhere, preferably signed with a private key of some authority or actor or provable identity, and then hashes it. This hash is stored into the blockchain, and when re-hashed the file can be easily verified for accuracy. However, this presumes the existence of the file somewhere outside the blockchain.
Full-store style is when the file itself is encrypted with a private key and stored wholly on the blockchain somehow — perhaps using one of the decentralized data solutions above. Then, the file remains forever accessible and verifiable.
This is useful in a whole bunch of areas. for example, criminal records shouldn’t be wipeable, and you should be able to identify an offender at any time in any jurisdiction, even automatically when crossing the border. The same goes for health records: there's no reason for them not be interchangeable and verifiable by every health institution on earth. Encrypting a health record is trivial, and when required it can be decrypted on the spot with the private key of a patient which can be something as simple as a fingerprint or iris scan.
Ownership of real estate or deeds is also a perfect use case: the ownership can change hands, in which case the new owner is written after the old one with the private key of the old one, signifying a legal exchange, while an auto-auditable paper trail remains.
5. Automation of Civilization
Referencing the above auto-auditing, we can use the blockchain to remove a big part of the middleman industry. Real estate agents, resellers, a lot of lawyers and accountants … even tax inspectors. If a country transitions to a well developed central-bank-issued cryptocurrency, all the transactions will immediately become auto-auditable with 100% accuracy. This means no tax reports, no inspections, no fines, no lost money trails. It's a cashless society 2.0.
6. Democracy (Voting)
Elections are often plagued with corruption and scandals, not to mention the long queues and the younger generations not voting because it's simply too impractical. Moving elections onto the blockchain enables them to be not only fair and verifiable, but also opens the door to merit-based voting, which many say is the only thing able to save democracy — whereas right now everyone has one vote …
In a merit-based democracy, which is easy to automate with blockchain, a farmer could have five times the vote power of a lawyer as far as crop dusting limits and regulations are concerned. What's more, this lets the government ask the people to vote for anything as often as they like, without enormous campaign costs and the parades that follow: a simple notification on an electronic device, and the user could reliably vote from the comfort of their own home.
7. Loyalty Points
A more trivial but no less popular (and widely in use!) purpose for the blockchain is tokenization of loyalty points. With the almost free infrastructure of the blockchain in place and scaling solutions like Loom's dappchains in the works, many companies are transitioning to a loyalty point system where users collect tradable tokens.
If I have three Domino's tokens and my friend has five, why wouldn't I be able to send my three tokens to her so that she can order our free eight-token pizza online by simply sending the tokens to Domino's Ethereum address?
8. Royalty and Proof-of-authorship
Building on the aspect of immutable records, blockchain can also digitize ownership of creative content. By hashing a digital work like a digital painting, a song, a movie, or anything else and uploading it to the blockchain, you can prove that you're the original author of said work — irrevocably. This technology is fully admissible in court as proof, because the blockchain is immutable and ultimate in its truth about a certain state. And that state says that you proved yourself as owning said work at a moment in time.
One example of a running application that does exactly this is Po.et.
9. Company Management
Last but not least, there are DAOs. A DAO is a decentralized autonomous application, and kind of ties into the Democracy point above. Where a government could use the blockchain to tally votes, a company could replace its entire board by blockchain users. This is what DAOs do today.
A DAO will distribute tokens to its investors, and these tokens will be used as voting rights. Any decision the company needs to weigh will be voted on by token holders. For example, imagine an investment DAO which can invest into other projects using the Ethereum collected during the investment phase. A user suggests that project YetAnotherICO deserves an investment. This user can send this in as an official suggestion (all automated) and others can vote on their call within a timeframe. Depending on how many tokens there are in an address, that's how much weight that address' vote has. If the majority votes in favor, the suggestion goes through.
An interesting use case for a modern DAO is AmpNet, which lets people sell electricity peer to peer, while a famous failed case (due to improperly written code) is the DAO incident.
Bonus: Supply Chain
You may have heard many pundits mention the supply chain as a good use case for the blockchain. The idea is that a given good is tracked from origin to destination using QR codes and sensors, so a customer in a store can simply scan a product's QR code and see its whole origin trail (hence, the company OriginTrail).
However, this is not a viable option as long as there are humans in the pipeline. Humans are, by default, fallible. They are the weakest point of any automated system, and if a truck driver whose fridge has blockchain-connected temperature sensors on the crates of tomatoes in the back and the driver's salary depends on his success rate, you can be sure that most drivers will rather stop at a gas station, get ice, and pour it directly onto the sensors when the AC fails than let a robot decrease their salary.
Only when humans have been completely removed from both the production and transportation of goods will we be able to use blockchain for the supply chain.
Conclusion
Blockchain is a viable solution to many problems, but an ill-fitting one for many more. When considering whether or not your project needs the blockchain, be sure to consult blockchain experts before you proclaim your project blockchain based.
Don't lock yourself into a technology for marketing reasons. Really study whether or not it's viable. Even if it is, you might be ahead of your time in your problem solving (like with supply chain), so playing it safe and waiting is better than rushing.
Chapter 5: Introduction to Ethereum: A Cryptocurrency with a Difference
by Bruno Škvorc
This introduction to Ethereum was originally published at Bruno’s Bitfalls website, and is reproduced here with permission.
Ethereum, launched in 2015 by Vitalik Buterin, is a special blockchain with a special token called Ether (the ETH symbol in exchanges).
Ether is used as fuel (literally, gas) to power the Ethereum network and execute smart contracts (see below). Ether is paid to miners (the people running the network) in gas cost to make the features below possible, and thus isn’t a cryptocurrency as much as cryptooil.
Here’s how it’s different from bitcoin, and what makes it stand out in the world of cryptocurrency.
Finality
Bitcoin has a theoretical limit of 21 million bitcoins ever produced, which makes it a deflationary currency: its total amount in circulation shrinks over time as people lose access to their wallet, stockpile it, etc.
Ether has no limit, but does have a fixed ratio of production. Currently, a little over 15.5 million Ether is mined every year, which comes down to 5 ETH every second — far more than bitcoin’s current rate of 25 BTC every 10 minutes or so. After Ethereum switches its mining type — more accurately known as consensus type — to PoS (see below), the production rate will decrease dramatically, approaching zero.

All this will make Ethereum’s value stop growing disproportionately, thus reaching market price stability which lends itself perfectly to the practical uses described below.
Smart Contracts
Bitcoin supports simple scripting. For example, you can write a small program with bitcoin which will support transactions that have multiple addresses as input, or that need multi-sig (a signature from several people before funds are released). The language used for this is not Turing complete, however, because it doesn’t have loops. (If you don’t know what this means, it doesn’t matter.)
Ethereum programs, on the other hand, are programmed in Solidity — a language that is Turing complete, thus allowing for any kind of program to be written in it, given enough resources (within reason). When a program is written in Solidity, it needs to get sent to the blockchain, which costs gas, paid in Ether. The bigger and more complex the program, the more expensive it is to deploy it to the blockchain. Thus, inefficiency costs money; it’s in the interest of everyone involved to keep those programs as small as possible.
Vitalik himself best describes the smart contracts with a vending machine analogy:
A vending machine [...] basically implements the conditions of some kind of an agreement. And the conditions of the agreement here are simple. You put $2 in, water comes out. You do not put $2 in, water does not come out. If you do not put $2 in but water does come out then that’s bad. And a vending machine is basically an encoding of this set of rules, that also comes with a mechanism that keeps it at least kind of secure. Secure enough for $2 water bottles.
When we pay an amount of Ether into a smart contract, that smart contract can then decide what to do with this Ether: send it to address A based on one condition, address B based on another, lock it in place for a period of time, refund it, move it around based on external input, trigger external output based on this Ether, etc.
A practical example would be replicating Kickstarter. Kickstarter is a site which lets creators gather funds for their projects before they’re launched. The basic rule is, if a given amount of money is exceeded in a given number of days, the project was a success and the money can be released to the makers. Otherwise, the money is refunded. This simple condition is very easy to replicate with smart
contracts, eliminating human error, greed, and the middleman from the equation, offering up a truly decentralized way of fundraising.
Applications built with smart contracts are called decentralized apps or dapps.
What are ERC20 Tokens?
A very important feature of Ethereum is the ability to create new tokens on the Ethereum blockchain. Tokens are a “cryptocurrency” of sorts built with specific smart contracts, and used like any other — sending to and from addresses. These tokens are sent to Ethereum addresses, not addresses of a new cryptocurrency’s blockchain. It’s because of this that tokens aren’t really a cryptocurrency per se, but the result of logic executed via a smart contract. Saying a token is a cryptocurrency is actually just as inaccurate as claiming that a program is a programming language.
A token can be a concert ticket, loyalty points in a shop, in-game currency, etc.
As more and more tokens started to appear, their format was standardized into ERC20 — a set of rules on how to develop them to make them easily consumable by various exchanges and systems. This means that all ERC20 tokens have some common features like a ticker symbol for exchanges, an icon, etc. making them easy to list on various websites by reusing the same code used for a previous ERC20 token.
Creating ERC20 tokens in combination with smart contracts is Ethereum’s revolutionary feature which is poised to completely change the way we do business. Tokens make autonomous companies possible, they allow for partial purchases of digital goods or land, they even allow for the creation of autonomous cars which drive themselves, pick up customers, drop them off, collect payment, and effectively pay themselves off. The number of potential use cases is so large we haven’t even scratched the surface.
PoS
The third biggest difference from bitcoin is that Ethereum will be moving to an alternative way of mining called PoS (Proof of Stake) rather than PoW (Proof of Work).
With bitcoin, a unit of proof of work is the hash gained by doing massive calculations. We have a separate post about PoW and PoS, but suffice it to say here that a PoS system isn’t wasteful as far as electricity goes, which is an important feature considering China’s mining dominance.
PoS has its own problems, of course. In this system, a user of Ethereum trying to be a node (this new type of miner) stakes their Ether to guarantee the correctness of their calculations. If they try to game the system and fake some calculations that aren’t valid, the other nodes will call the node out, and the stake gets lost. Otherwise, the staker gets their stake back after a few months (yes, months!) plus any fee earnings they scored from transactions or from executing smart contracts. The size of the stake deters malicious actors; the initial stake is said to be 1000 Ether.
