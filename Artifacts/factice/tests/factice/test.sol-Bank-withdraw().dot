digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(balance[msg.sender] > 0)

IRs:
REF_1(uint256) -> balance[msg.sender]
TMP_0(bool) = REF_1 > 0
TMP_1(None) = SOLIDITY_CALL require(bool)(TMP_0)"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
(success) = msg.sender.call{value: balance[msg.sender]}()

IRs:
REF_3(uint256) -> balance[msg.sender]
TUPLE_0(bool,bytes) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[''] value:REF_3
success(bool)= UNPACK TUPLE_0 index: 0 "];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(success)

IRs:
TMP_2(None) = SOLIDITY_CALL require(bool)(success)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
balance[msg.sender] = 0

IRs:
REF_4(uint256) -> balance[msg.sender]
REF_4(uint256) (->balance) := 0(uint256)"];
}
